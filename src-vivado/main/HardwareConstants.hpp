#include <xparameters.h>


/**
 * Channels used by the AXI GPIOs.
 */
namespace AXI_GPIO_CHANNELS {

	/* Port used for LEDs in LED GPIO. */
	const int LED_CHANNEL = 1;

	/* Port used for heartbeat in LED GPIO. */
	const int HEARTBEAT_CHANNEL = 2;

	/* Port used for testpin in TESTPIN GPIO. */
	const int TESTPIN_CHANNEL = 1;

}


/**
 * Addresses used by the AXI GPIOs.
 */
namespace HARDWARE_ADDRESSES {


	/* Address of GPIO that LEDs are connected to. */
	const int GPIO_DEVICE_LED = XPAR_AXI_GPIO_LED_DEVICE_ID;

	/* Address of GPIO that the TESTPINs are connected to. */
	const int GPIO_DEVICE_TESTPIN = XPAR_AXI_GPIO_TESTPINS_DEVICE_ID;

    // TODO: are these pins correct?

    /* Address of the RC's throttle: PIN T14 (JD1). */
    const int RC_THROTTLE = XPAR_RC_0_S00_AXI_BASEADDR;     // TODO: this was RC_T

    /* Address of the RC's roll: PIN T15 (JD2). */
    const int RC_ROLL = XPAR_RC_0_S00_AXI_BASEADDR + 0x04;  // TODO: this was RC_Y

    /* Address of the RC's pitch: PIN P14 (JD3). */
    const int RC_PITCH = XPAR_RC_0_S00_AXI_BASEADDR + 0x08; // TODO: this was RC_X

    /* Address of the RC's yaw: PIN R14 (JD4). */
    const int RC_YAW = XPAR_RC_0_S00_AXI_BASEADDR + 0x0C;   // TODO: this was RC_Z

    /* Address of the RC's mode: PIN U15 (JD6). */
    const int RC_MODE = XPAR_RC_1_S00_AXI_BASEADDR;

    /* Address of the RC's inductive switch: PIN V17 (JD7). */
    const int RC_INDUCTIVE = XPAR_RC_1_S00_AXI_BASEADDR + 0x08; // TODO: this was RC_IND

    /* Address of the RC's tuner knob: // TODO: what pin? */
    const int RC_TUNER = XPAR_RC_1_S00_AXI_BASEADDR + 0x0C; // TODO: this was RC_TUNE

    /* Address of the sonar : // TODO: what pin? */
    const int SONAR = XPAR_RC_1_S00_AXI_BASEADDR + 0x04;    // TODO: this was SONAR_REG


}


namespace INTERRUPT_SYSTEM {

    /* Interrupt controller device ID. */
    const int INTC_DEVICE_ID = XPAR_PS7_SCUGIC_0_DEVICE_ID;

    /* ID of interrupt generated by I2C when data is being processed. */
    const int IIC_INT_VEC_ID = XPAR_XIICPS_0_INTR;

    /* ID of interrupt generated by IMU via JB4 pin. */
    const int GYR_INT_ID = XPAR_FABRIC_SYSTEM_CORE1_NIRQ_INTR;

    /* I2C serial clock frequency in hertz. */
    // TODO: inconsistent with used clock rate, see Interrupt.cpp
	const int IIC_SCLK_RATE = 100010; 

}




